--- ./libpolybori/include/polybori/cudd/cuddInt.h.orig	2012-07-09 02:23:24.000000000 -0600
+++ ./libpolybori/include/polybori/cudd/cuddInt.h	2012-08-06 12:26:19.481015946 -0600
@@ -17,6 +17,7 @@
 #ifndef polybori_cudd_cuddInt_h_
 #define polybori_cudd_cuddInt_h_
 
-#include "../../../../Cudd/cudd/cuddInt.h"
+#include "polybori/cudd/prefix.h"
+#include <cudd/cuddInt.h>
 
 #endif
--- ./libpolybori/include/polybori/cudd/cudd.h.orig	2012-07-09 02:23:24.000000000 -0600
+++ ./libpolybori/include/polybori/cudd/cudd.h	2012-08-06 12:26:19.481015946 -0600
@@ -17,6 +17,7 @@
 #ifndef polybori_cudd_cudd_h_
 #define polybori_cudd_cudd_h_
 
-#include "../../../../Cudd/cudd/cudd.h"
+#include "polybori/cudd/prefix.h"
+#include <cudd/cudd.h>
 
 #endif
--- ./SConstruct.orig	2013-01-29 15:37:01.000000000 -0700
+++ ./SConstruct	2013-02-06 19:07:47.571371270 -0700
@@ -1082,18 +1082,18 @@ def shared_object(o, **kwds):
 #env.Append(CPPDEFINES=["PBORI_HAVE_IEEE_754"])
 
 
-cudd_headers = [ CuddPath('cudd/' + fname + '.h') for fname in Split("""
-cuddInt cudd util""") ] + [PBInclPath('cudd/prefix' + fname + '.h')
+cudd_headers = [PBInclPath('cudd/cudd' + fname + '.h')
+for fname in ['', 'Int'] ] + [PBInclPath('cudd/prefix' + fname + '.h')
                       for fname in ['', '_internal'] ]
     
-cudd_resources = [CuddPath('cudd/cudd' + elt) for elt in Split("""
-API.c Cache.c Init.c LCache.c Ref.c Table.c ZddFuncs.c ZddSetop.c""") ]
+#cudd_resources = [CuddPath('cudd/cudd' + elt) for elt in Split("""
+#API.c Cache.c Init.c LCache.c Ref.c Table.c ZddFuncs.c ZddSetop.c""") ]
 
-cudd_shared = shared_object(cudd_resources, CPPPATH = env['CPPPATH'] + [CuddPath()])
+#cudd_shared = shared_object(cudd_resources, CPPPATH = env['CPPPATH'] + [CuddPath()])
 
 #libCudd = env.StaticLibrary(CuddPath(cudd_name), cudd_resources)
 
-shared_resources += cudd_shared
+#shared_resources += cudd_shared
 
 ###################
 # End of Cudd stuff
@@ -1149,7 +1149,7 @@ pb_src=[PBPath('src', source) for source
 libpb_name = 'polybori'
 libpb_name_static = libpb_name
 
-libpb=env.StaticLibrary(PBPath(libpb_name_static), pb_src + cudd_resources, 
+libpb=env.StaticLibrary(PBPath(libpb_name_static), pb_src, #+ cudd_resources, 
                         CCFLAGS=['-g'] + env['CCFLAGS'])
 
 
@@ -1442,9 +1442,9 @@ disttar.py doxygen.py""")
         allsrcs.append(env.Dir(dirname))
 
     # Cudd is not distributed completely (unused and unfree things removed)
-    allsrcs += [CuddPath(src) for src in Split("""LICENSE README
-    RELEASE.NOTES""") ]
-    allsrcs += [env.Dir(CuddPath(src)) for src in Split("""cudd""") ]
+    #allsrcs += [CuddPath(src) for src in Split("""LICENSE README
+    #RELEASE.NOTES""") ]
+    #allsrcs += [env.Dir(CuddPath(src)) for src in Split("""cudd""") ]
 
     # doc is not distributed completely
     allsrcs += [ DocPath(dsrc) for dsrc in Split("""doxygen.conf index.html.in
