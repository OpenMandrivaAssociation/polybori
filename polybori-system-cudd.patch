--- ./libpolybori/include/polybori/cudd/cuddInt.h.orig	2012-07-09 02:23:24.000000000 -0600
+++ ./libpolybori/include/polybori/cudd/cuddInt.h	2012-08-06 12:26:19.481015946 -0600
@@ -17,6 +17,7 @@
 #ifndef polybori_cudd_cuddInt_h_
 #define polybori_cudd_cuddInt_h_
 
-#include "../../../../Cudd/cudd/cuddInt.h"
+#include "polybori/cudd/prefix.h"
+#include <cudd/cuddInt.h>
 
 #endif
--- ./libpolybori/include/polybori/cudd/cudd.h.orig	2012-07-09 02:23:24.000000000 -0600
+++ ./libpolybori/include/polybori/cudd/cudd.h	2012-08-06 12:26:19.481015946 -0600
@@ -17,6 +17,7 @@
 #ifndef polybori_cudd_cudd_h_
 #define polybori_cudd_cudd_h_
 
-#include "../../../../Cudd/cudd/cudd.h"
+#include "polybori/cudd/prefix.h"
+#include <cudd/cudd.h>
 
 #endif
--- ./SConstruct.orig	2012-07-09 02:23:24.000000000 -0600
+++ ./SConstruct	2012-08-06 12:26:19.482015946 -0600
@@ -900,18 +900,18 @@ BuildPyPBPath = PathJoiner(BuildPath(Ins
 #env.Append(CPPDEFINES=["PBORI_HAVE_IEEE_754"])
 
 
-cudd_headers = [ CuddPath('cudd/' + fname + '.h') for fname in Split("""
-cuddInt cudd util""") ] + [PBInclPath('cudd/prefix' + fname + '.h')
+cudd_headers = [PBInclPath('cudd/cudd' + fname + '.h')
+for fname in ['', 'Int'] ] + [PBInclPath('cudd/prefix' + fname + '.h')
                       for fname in ['', '_internal'] ]
     
-cudd_resources = [CuddPath('cudd/cudd' + elt) for elt in Split("""
-API.c Cache.c Init.c LCache.c Ref.c Table.c ZddFuncs.c ZddSetop.c""") ]
+#cudd_resources = [CuddPath('cudd/cudd' + elt) for elt in Split("""
+#API.c Cache.c Init.c LCache.c Ref.c Table.c ZddFuncs.c ZddSetop.c""") ]
 
-cudd_shared = shared_object(cudd_resources, CPPPATH = env['CPPPATH'] + [CuddPath()])
+#cudd_shared = shared_object(cudd_resources, CPPPATH = env['CPPPATH'] + [CuddPath()])
 
 #libCudd = env.StaticLibrary(CuddPath(cudd_name), cudd_resources)
 
-shared_resources += cudd_shared
+#shared_resources += cudd_shared
 
 ###################
 # End of Cudd stuff
@@ -967,7 +967,7 @@ pb_src=[PBPath('src', source) for source
 libpb_name = 'polybori'
 libpb_name_static = libpb_name
 
-libpb=env.StaticLibrary(PBPath(libpb_name_static), pb_src + cudd_resources)
+libpb=env.StaticLibrary(PBPath(libpb_name_static), pb_src) #+ cudd_resources)
 
 if isinstance(libpb,list):
     libpb=libpb[0]
@@ -1229,9 +1229,9 @@ disttar.py doxygen.py""")
         allsrcs.append(env.Dir(dirname))
 
     # Cudd is not distributed completely (unused and unfree things removed)
-    allsrcs += [CuddPath(src) for src in Split("""LICENSE README
-    RELEASE.NOTES""") ]
-    allsrcs += [env.Dir(CuddPath(src)) for src in Split("""cudd""") ]
+    #allsrcs += [CuddPath(src) for src in Split("""LICENSE README
+    #RELEASE.NOTES""") ]
+    #allsrcs += [env.Dir(CuddPath(src)) for src in Split("""cudd""") ]
 
     # doc is not distributed completely
     allsrcs += [ DocPath(dsrc) for dsrc in Split("""doxygen.conf index.html.in
@@ -1523,8 +1523,8 @@ if HAVE_DOXYGEN:
     documastersubdirs += " c++"
 
 env.DocuMaster(DocPath('index.html'), [DocPath('index.html.in')] + [
-    env.Dir(DocPath(srcs)) for srcs in Split(documastersubdirs) ] + [
-    env.Dir('Cudd/cudd/doc')])  
+    env.Dir(DocPath(srcs)) for srcs in Split(documastersubdirs) ]) #+ [
+    #env.Dir('Cudd/cudd/doc')])  
 
 pbrpmname = pboriname + '-' + pboriversion + "." + pborirelease 
 
@@ -1680,8 +1680,8 @@ if 'install' in COMMAND_LINE_TARGETS:
     env.Clean(pydocuinst, pydocuinst)
 
     # Copy Cudd documentation
-    CopyAll(InstDocPath('cudd'), 'Cudd/cudd/doc', env) 
-    CopyAll(InstDocPath('cudd/icons'), 'Cudd/cudd/doc/icons', env)
+    #CopyAll(InstDocPath('cudd'), 'Cudd/cudd/doc', env) 
+    #CopyAll(InstDocPath('cudd/icons'), 'Cudd/cudd/doc/icons', env)
 
     # Copy Tutorial
     if have_l2h or have_t4h :
@@ -1693,7 +1693,7 @@ if 'install' in COMMAND_LINE_TARGETS:
     FinalizeNonExecs(env.DocuMaster(InstDocPath('index.html'),
                                     [DocPath('index.html.in')] + [ 
         env.Dir(InstDocPath(srcs)) for srcs in Split("""tutorial python
-        c++ cudd""") ] ))
+        c++""") ] ))
 
     # Non-executables to be installed
     pyfile_srcs = glob(PyRootPath('polybori/*.py'))
